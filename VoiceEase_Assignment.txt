# VoiceEase: Voice Stress Analysis Chatbot

## Project Title
VoiceEase - Voice Stress Analysis Chatbot Web Application

## Objective
To develop an interactive web application that analyzes stress levels through voice input and provides personalized stress management recommendations through an AI-powered chatbot interface, enabling users to monitor and manage their mental wellness.

## Description
VoiceEase is a comprehensive web application designed to help users monitor and manage their stress levels using voice analysis technology. The application integrates advanced speech processing with a user-friendly interface to provide immediate feedback on stress indicators detected in users' voice patterns.

The solution features:

1. **Voice-Based Stress Detection**: The application analyzes multiple factors in a user's voice recording, including speech pace, voice tone patterns, voice tremor detection, and sentiment analysis to determine stress levels.

2. **Conversational Wellness Chatbot**: Powered by Google Gemini AI, the chatbot provides mental wellness support through natural conversation.

3. **Stress History Tracking**: Users can view their stress level changes over time with visual charts and detailed breakdowns of past analyses.

4. **Breathing Exercise Feature**: An interactive 4-7-8 breathing technique guide with visual feedback to help users reduce stress in real-time.

5. **Resource Library**: Curated collection of articles, videos, and audio resources for stress management and mental wellness.

## Implementation Details

### Technologies Used
- **Frontend**: React, TypeScript, TailwindCSS, Shadcn/UI
- **Backend**: Node.js, Express
- **APIs**: AssemblyAI for speech analysis, Google Gemini AI for chatbot
- **Data Visualization**: Recharts
- **Audio Processing**: Web Audio API
- **Data Storage**: Client-side localStorage

### Correct Implementation
1. **Modular Component Structure**: The application follows a clean architecture with separate client and server components. The frontend is organized into logical sections for chat, stress analysis, UI components, and layouts.

2. **Responsive Design**: The application is fully responsive across desktop and mobile devices, with a sidebar navigation for larger screens and a bottom navigation for mobile devices.

3. **Voice Analysis Algorithm**: Successfully implemented a multi-factor stress analysis system that evaluates voice tone, speech pace, voice tremor, and sentiment to calculate an overall stress score.

4. **Theme Support**: Full dark/light mode theming with context-aware components that match the user's preference.

5. **Accessibility**: The UI components follow accessibility best practices with proper contrast ratios, keyboard navigation support, and semantic HTML.

6. **Fallback Mechanisms**: The system includes fallback mechanisms for cases where API services are unavailable, ensuring users still receive guidance.

### Challenges and Solutions

1. **Challenge**: Audio quality issues affecting stress analysis accuracy.  
   **Solution**: Implemented audio normalization and noise reduction preprocessing to improve analysis reliability.

2. **Challenge**: Ensuring breathing exercise instructions were clear and easy to follow.  
   **Solution**: Added visual cues with color changes and animated progress indicators to guide users through each breath phase.

3. **Challenge**: Performance issues with real-time voice processing.  
   **Solution**: Optimized the recording process and implemented progressive loading of analysis results.

4. **Challenge**: Making the modal components work well on both desktop and mobile.  
   **Solution**: Implemented responsive design with different layouts and interaction patterns based on screen size.

## Deployment

### Deployment Process
The VoiceEase application is deployed following these steps:

1. Source code is hosted on GitHub with proper version control
2. Frontend is built using Vite's production build process
3. The application is hosted on Vercel for seamless deployment from GitHub
4. Environment variables are securely configured in the deployment platform for API keys
5. Continuous integration ensures automatic deployment when changes are pushed to the main branch

### Deployment Link
[VoiceEase Web Application](https://voiceease.onrender.com/)  

### GitHub Repository
[GitHub - VoiceStressAnalyzer](https://github.com/harshraj001/VoiceStressAnalyzer)

## Evaluation Metrics
The success of the VoiceEase application is measured through:

1. **Stress Analysis Accuracy**: Comparison of algorithm-detected stress levels with self-reported stress
2. **User Engagement**: Average session duration and return user rate
3. **Feature Utilization**: Tracking which features (chat, voice analysis, breathing exercises) are most used
4. **User Satisfaction**: Feedback collected through in-app surveys
5. **Technical Performance**: Load times, voice processing speed, and error rates

## Future Enhancements
1. Integration with wearable devices for combined biometric and voice stress analysis
2. Personalized stress management plans based on historical data
3. Community features for shared wellness activities
4. Expanded breathing exercise library with different techniques
5. Cloud synchronization for cross-device access to stress history

---

*Project developed by:*
- Harsh Raj (12310271)
- Ayush (12311916)
- Rahul Kumar (12312284)
